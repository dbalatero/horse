#!/usr/bin/env ruby

require 'yaml'
require 'music'
require 'enumclause'

class CashhhhhhhError < StandardError; end


$enumclause = Horse::Enumclause.new

module Horse
  HORSES = YAML.load(File.read('horses.yml'))
  ANNOUNCER = YAML.load(File.read('announcer.yml'))
  COLORS = { :default => "\e[39m",
             :red     => "\e[31m",
             :green   => "\e[32m",
             :yellow  => "\e[33m",
             :magenta => "\e[35m",
             :cyan    => "\e[36m" }
  COLOR_ARRAY = COLORS.values - [COLORS[:default]]

  @cash_to_bet = rand(1000000000) + (rand(100).to_f / 100.0)
  class << self
    def play
      horse = nil
      while horse.nil?
        puts "Which horse would you like to bet on?"
        HORSES.each_with_index do |name, index|
          puts "#{index + 1}. #{name}"
        end
        print "[1-#{HORSES.size}] "
        STDOUT.flush
        number = gets
        begin
          number = Integer(number)-1
        rescue Exception
          puts "Please enter a number."
          puts
          redo
        end
        horse = HORSES[number]
      end
      puts

      winner = nil
      while winner.nil?
        puts "How much do you want to bet? You have $#{@cash_to_bet} to bet with."
        puts "Alternatively, type 'pet' to pet the horses."
        print "$"
        STDOUT.flush
        amount = gets.strip!

        if amount == $enumclause.rule_violation
          action = $enumclause.take_valiant_action!(self)
          eval(action)
        end

        if amount == "up up down down left right left right b a"
          puts "                                ,_.-('--.         "
          puts "                              .(  '-.'.\'\_,      "
          puts "                             /  `-.`_;;-./(/=,    "
          puts "                            |.-.-'.'       .`.\   "
          puts "                            { .-.'         //,|\\ "
          puts "                           /-'./   '._    <| \)   "
          puts "                          { -./      |\    |      "
          puts "                           {_/       \ |   |      "
          puts "          .--\"\"\"--..,___,.;'          |(  o/      "
          puts "        .'                            | `\"`       "
          puts "       /                             /            "
          puts "   _.-'|                            `-._          "
          puts " .' .'/|                              _ `\        "
          puts "/ .-'|  \       ,          _.-`'-.__.' | /        "
          puts "|( / |   |     / `'------'`        \ \/ /         "
          puts " \  ) \  /   /`._                /`-./ /          "
          puts " |.' / )',  \._  `\              \___ /           "
          puts " / .'_.;  \  \ `) |               / /`            "
          puts " '._;.-,)  `\ \/  |            .-' /              "
          puts "      (      ) |_/             |_.'               "
          puts "          .-' /                                   "
          puts "          \_.'                                    "
          puts "                                                  "
          next
        end

        begin
          amount = Float(amount)
          if amount > @cash_to_bet
            raise CashhhhhhhError
          end
        rescue CashhhhhhhError
          puts "You don't have enough cash to make that bet."
          puts
          redo
        rescue Exception
          puts "Please enter a number."
          puts
          redo
        end
        winner = HORSES[rand(HORSES.size)]
      end
      puts
      puts "You bet #{amount} on #{horse}"
      spin(10, true)

      if winner == horse
        @cash_to_bet += amount
        puts "YOU WON #{amount}!!!!!!!!"
      else
        @cash_to_bet -= amount
        puts "BITCH YOU LOSTTTTTTTTTTT! THE WINNER WAS #{winner}"
      end

      puts "Your cash total: $#{@cash_to_bet}"
    end

    def has_money?
      @cash_to_bet > 0.00
    end

    private
    def the_hoff_says
      puts "#{HORSES[rand(HORSES.size)]} #{ANNOUNCER[rand(ANNOUNCER.size)]}"
    end

    def spin(n, hoff = false)
      hide_cursor
      n.times do
        n = rand(11) + 10
        loop_print_flush_sleep(n, '.')
        loop_print_flush_sleep(n, "\b \b")
        the_hoff_says if hoff
      end
      show_cursor
      print COLORS[:default]
    end

    def loop_print_flush_sleep(n, str)
      n.times do
        print COLOR_ARRAY[rand(COLOR_ARRAY.size)]
        print str
        STDOUT.flush
        sleep rand / 100 * 3
      end
    end

    def hide_cursor
      print "\e[?25l"
    end

    def show_cursor
      print "\e[?25h"
    end

    COLORS.each do |key, value|
      code = <<-EOM
        def #{key}
          print "#{value}"
        end
      EOM
      eval code
    end
  end
end

if __FILE__ == $0
  puts "HERE'S THE DEAL. WE MADE A FORTUNE FOR YOU:"
  puts $enumclause.fortune
  puts "----------------------------"
  puts "There is one rule:"
  sleep 1
  puts $enumclause.spit_rule
  sleep 1
  puts "Let's start!"

  Horse::ThemeSong.play
  Horse.play while Horse.has_money?

  # shiftytyyyyyyyyyyyy
  at_exit {
    puts "--------------------------------"
    puts "SON U OUTTA MONEYYYYYYYYYYYYYYYY"
  }
  exit
end
